import { createSlice } from "@reduxjs/toolkit";

/**
 * The statistical values that are computable are listed here as
 * an "enum"
 */
const STATISTICAL_VALUES = {
    mean: "mean",
    median: "median",
    derivative: "derivative",
    percentile: "percentile",
}

const STATISTICAL_VALUES_LIST = Object.values(STATISTICAL_VALUES);



const MODEL_DATA_TEMPLATE = {   // single model
    color: null,                // if not set it defaults to standard value from api
    isVisible: true,            // show/hide individual models from a group
    mean: true,
    derivative: true,
    median: true,
    percentile: true,
}

const MODEL_GROUP_TEMPLATE = { 
    name: null,
    modelList: [],
    models: {},         // models is lookup table
    isVisible: true,    // show/hide complete group
    visibileSV: {       // lookup table so the reducer impl. can be more convenient
        mean: true,
        derivative: true,
        median: true,
        percentile: true,
    }
}

/**
 * The initial state of the modelSlice defines the data structure in the 
 * store. Each plot has its own data i.e. have separate model(groups).
 * 
 * IF you change this initial state you have to adapt the first test in the
 * corresponding test file, that tests the initial state.
 */
const initialState = {
    modelGroupList: ["all"],
    // currently active plot
    modelGroups: {
        // this objects holds key-value-pairs, the keys being the model-group 
        // identifier and the values being the settings for each group 
        "all": { 
            // model group storing all information until it is possible 
            // to implement more model groups
            name: "All OCTS models",
            modelList: ["CCMI-1_ACCESS_ACCESS-CCM-refC2"],
            models: { // models is lookup table
                "CCMI-1_ACCESS_ACCESS-CCM-refC2": { // single model
                    color: null, // if not set it defaults to standard value from api
                    isVisible: true, // show/hide individual models from a group
                    mean: true,
                    derivative: true,
                    median: true,
                    percentile: true,
                }
            },
            isVisible: false, // show/hide complete group
            visibileSV: { // lookup table so the reducer impl. can be more convenient
                mean: true,
                derivative: true,
                median: true,
                percentile: true,
            }
        }
    },
}

/**
 * The modelSlice is generated by the redux toolkit. The reducers are defined here
 * and the corresponding actions are auto-generated.
 */
const modelsSlice = createSlice({
    name: "models",
    initialState,
    reducers: {

        /**
         * This reducer accepts an action object returned from setModelsOfModelGroup()
         * 
         *      e.g. dispatch(setModelsOfModelGroup({
         *              groupId: "refC2", 
         *              modelList: ["CCMI-1_ACCESS_ACCESS-CCM-refC2", "CCMI-1_CCCma_CMAM-refC2"]
         *      }))
         * 
         * and calculates the new state based on the action and the action 
         * data given in action.payload.
         * 
         * This method provides a convenient interface for the AddModelGroupModal
         * by allowing to dispatch a groupId with the required models. If
         * the group already exists the corresponding data is updated otherwise
         * the reducer TAKES CARE of creating a group.
         * 
         * @param {object} state the current store state of: state/plot
         * @param {object} action accepts the action returned from updateModelGroup()
         * @param {object} action.payload the payload is an object containg the given data
         * @param {string} action.payload.groupId the name of the group to set
         * @param {string} action.payload.modelList the list of models the group should have
         */
        setModelsOfModelGroup(state, action) { 
            const { groupId, modelList } = action.payload;
            // set model group
            if (state.modelGroupList.includes(groupId)) {
                const selectedModelGroup = state.modelGroups[groupId];
                
                // remove unwanted
                const toDelete = selectedModelGroup.filter(model => !modelList.includes(model));
                
                toDelete.forEach( // delete from lookup table
                    model => delete selectedModelGroup[model]
                );
                // filter out from list
                selectedModelGroup.modelList = selectedModelGroup.modelList.filter(model => !toDelete.includes(model));  
                
                // add new ones
                for (let model of modelList) {
                    if (!selectedModelGroup[model]){ // initialize with default settings
                        selectedModelGroup.modelList.push(model);
                        selectedModelGroup.models[model] = Object.assign({}, MODEL_DATA_TEMPLATE);
                    }
                };
            } else { // create new group
                state.modelList.push(groupId);
                state.modelGroups[groupId] = Object.assign({}, MODEL_GROUP_TEMPLATE);
                const currentGroup = state.modelGroups[groupId];
                for (let model of modelList) {
                    currentGroup.modelList.push(model);
                    currentGroup.models[model] = Object.assign({}, MODEL_DATA_TEMPLATE);
                }
            }
        }, 

        /**
         * This reducer accepts an action object returned from deleteModelGroup()
         * 
         *      e.g. dispatch(deleteModelGroup({groupId: "refC2"}))
         * 
         * and calculates the new state based on the action and the action 
         * data given in action.payload.
         * 
         * This method provides a convenient interface for the AddModelGroupModal
         * by allowing to dispatch a groupId with the required models. If
         * the group already exists the corresponding data is updated otherwise
         * the reducer takes care of creating a group.
         * 
         * @param {object} state the current store state of: state/plot
         * @param {object} action accepts the action returned from deleteModelGroup()
         * @param {object} action.payload the payload is an object containg the given data
         * @param {string} action.payload.groupId the name of the group that should be deleted
         */
        deleteModelGroup(state, action) {
            const { groupId } = action.payload;
            if (!state.modelGroupList.includes(groupId)) { // no group with this name in store
                throw `tried to access "${groupId}" which is not a valid group`;
            };

            state.modelGroupList = state.modelGroupList.filter(name => name !== groupId); // filter out name
            delete state.modelGroups[groupId]; // delete from lookup table

        },
        
        /**
         * TODO: mit Nick absprechen
         * 
         * @param {*} state 
         * @param {*} action 
         */
        updatePropertiesOfModelGroup(state, action) {
        },

        /**
         * This reducer accepts an action object returned from setStatisticalValueForGroup()
         *      e.g. dispatch(setStatisticalValueForGroup(
         *          {groupID: "all", svType: STATISTICAL_VALUES.median, isIncluded: true}
         *      ));
         * and calculates the new state based on the action and the action 
         * data given in action.payload.
         * 
         * In this case for a given group is set whether the given statistical values (SV)
         * should be displayed.
         * 
         * @param {object} state the current store state of: state/plot
         * @param {object} action accepts the action returned from updateModelGroup()
         * @param {object} action.payload the payload is an object containg the given data
         * @param {string} action.payload.groupId a string specifying the group
         * @param {string} action.payload.svType the SV as a string
         * @param {boolean} action.payload.isIncluded should the SV be displayed for the given group
         */
        setStatisticalValueForGroup(state, action) { // this is for an entire group
            const { groupId, svType, isIncluded } = action.payload;
            
            if (!STATISTICAL_VALUES_LIST.includes(svType)) { // svType doesn't represent a valid statistical value
                throw `tried to set statistial value "${svType}" that is not a valid statistical value (${STATISTICAL_VALUES_LIST.join("|")})`;
            }
            if (!state.modelGroupList.includes(groupId)) { // no group with this name in store
                throw `tried to access "${groupId}" which is not a valid group`;
            };

            state.modelGroups[groupId].visibileSV[svType] = isIncluded;
        },

        /**
         * This reducer accepts an action object returned from setVisibilityForGroup()
         *      e.g. dispatch(setVisibilityForGroup(
         *          {groupID: "refC2", isVisibile: true}
         *      ));
         * and calculates the new state based on the action and the action 
         * data given in action.payload.
         * 
         * In this case for a given group is set whether it should be visibile or not.
         * 
         * @param {object} state the current store state of: state/plot
         * @param {object} action accepts the action returned from updateModelGroup()
         * @param {object} action.payload the payload is an object containg the given data
         * @param {string} action.payload.groupId a string specifying the group
         * @param {string} action.payload.svType the SV as a string
         * @param {boolean} action.payload.isIncluded should the SV be displayed for the given group
         */
        setVisibilityForGroup(state, action) { // this is for an entire group
            const { groupId, isVisible } = action.payload;

            if (!state.modelGroupList.includes(groupId)) {
                throw `tried to access "${groupId}" which is not a valid group`;
            };

            state.modelGroups[groupId].isVisible = isVisible;
        },
    }
})

/**
 * The here listed actions are exported and serve as an interface for
 * the view (our react components).
 */
export const { 
    setModelsOfModelGroup,
    deleteModelGroup,
    updatePropertiesOfModelGroup,
    setStatisticalValueForGroup,
    setVisibilityForGroup,
} = modelsSlice.actions;

/**
 * The reducer combining all reducers defined in the plot slice. 
 * This has to be included in the redux store, otherwise dispatching 
 * the above defined actions wouldn't trigger state updates.
 */
export default modelsSlice.reducer;