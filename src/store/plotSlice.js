import { createSlice } from "@reduxjs/toolkit"

/**
 * The initial state of the plotSlice defines the data structure in the 
 * store. Each plot has its own settings i.e. title, location etc.
 */
const initialState = {
    
    plotId: "tco3_zm", // currently active plot
    // maps plotids to their settings
    settings: {
        "tco3_zm": {
            name: "OCTS", // should show up in the drop down menu
            title: "OCTS Plot", // the title shown in the apexcharts generated chart
            location: {
                minLat: -90,
                maxLat: 90
            },
            displayXRange: {
                minX: 1960,
                maxX: 2100,
            },
            displayYRange: {
                minY: 200,
                maxY: 400,
            },
            months: [
                1
            ],
        },
        "tco3_return": {
            name: "Return/Recovery",
            title: "Return/Recovery Plot",
            location: { // custom user defined region
                minLat: -90,
                maxLat: 90
            },
            displayXRange: {
                minX: 0,
                maxX: 0,
            },
            displayYRange: {
                minY: 200,
                maxY: 400,
            },
            months: [
                1
            ],
        }
    }
}

/**
 * The plotSlice is generated by the redux toolkit. The reducers are defined here
 * and the corresponding actions are auto-generated.
 */
const plotSlice = createSlice({
    name: "plot",
    initialState,
    reducers: {
        setActivePlotId(state, action) { // e.g. dispatch(setActivePlotId({id: "tco3_zm"}))
            const { id } = action.payload
            state.plotId = id
        }, 
        setTitle(state, action) { // e.g. dispatch(setActivePlotId({title: "OCTS Plot"}))
            const { title } = action.payload
            state.settings[state.plotId].title = title
        },
        setLocation(state, action) { 
            const {minLat, maxLat} = action.payload
            const location = state.settings[state.plotId].location
            location.minLat = minLat
            location.maxLat = maxLat
        },
        setDisplayXRange(state, action) { 
            const {minX, maxX} = action.payload
            const displayXRange = state.settings[state.plotId].displayXRange
            displayXRange.minX = minX
            displayXRange.maxX = maxX
        },
        setDisplayYRange(state, action) { 
            const {minY, maxY} = action.payload
            const displayYRange = state.settings[state.plotId].displayYRange
            displayYRange.minY = minY
            displayYRange.maxY = maxY
        },
        setMonths(state, action) { 
            state.settings[state.plotId].months = action.payload.months
        },
    }   
})


/**
 * The here listed actions are exported and serve as an interface for
 * the view (our react components).
 */
export const {
    setActivePlotId,
    setTitle,
    setLocation,
    setDisplayXRange,
    setDisplayYRange,
    setMonths,
} = plotSlice.actions

/**
 * The reducer combining all reducers defined in the plot slice. 
 * This has to be included in the redux store, otherwise dispatching 
 * the above defined actions wouldn't trigger state updates.
 */
export default plotSlice.reducer

/**
 * This selectors allows components to select the current plot id
 * from the store. The plot id is a string using the same naming as the
 * o3as api e.g. tco3_zm or tco3_return
 * 
 * @param {object} state the global redux state
 * @returns {string} the current active plot id
 */
export const selectPlotId = state => state.plot.plotId

/**
 * This selectors allows components to select the current plot name
 * from the store. The plot name is the humand readable version specifying 
 * the plot e.g. OCTS or Return/Recovery
 * 
 * @param {object} state the global redux state
 * @returns {string} the current active plot name
 */
export const selectPlotName = state => state.plot.settings[state.plot.plotId].name

/**
 * This selectors allows components to select the current plot title
 * from the store.
 * 
 * @param {object} state the global redux state
 * @returns {string} the current active plot title
 */
export const selectPlotTitle = state => state.plot.settings[state.plot.plotId].title

/**
 * This selectors allows components to select the current plot location
 * from the store. The location is an object containg a minLat and maxLat attribute.
 * 
 * @param {object} state the global redux state
 * @returns {object} holds the current location that includes a minLat and maxLat attribute.  
 */
export const selectPlotLocation = state => state.plot.settings[state.plot.plotId].location

/**
 * This selectors allows components to select the current x range
 * from the store.
 * 
 * @param {object} state the global redux state
 * @returns {object} holds the current x range that includes minX and maxX
 */
export const selectPlotXRange = state => state.plot.settings[state.plot.plotId].displayXRange

/**
 * This selectors allows components to select the current y range
 * from the store.
 * 
 * @param {object} state the global redux state
 * @returns {object} holds the current x range that includes minY and maxY
 */

export const selectPlotYRange = state => state.plot.settings[state.plot.plotId].displayYRange

/**
 * This selectors allows components to select the current selected months
 * from the store.
 * 
 * @param {object} state the global redux state
 * @returns {array} array of strings describing the current selected months
 */

export const selectPlotMonths = state => state.plot.settings[state.plot.plotId].months
