@startuml
title o3as WebApp
skinparam dpi 300

package "GUI" {
    class "App" << (C,blue) component>> {
        Symbolic representation of our app (View)
    }

    class "Graph" << (C, blue) component>> {
        This component connects apexcharts to\nour app
    }

}



package "API" {

    class "o3as" << (A, purple) api >> {
        +/models
        +/data/tco3_zm
        +/data/tco3_return
        +/plots
        +/plots/tco3_zm
        +/plots/tco3_return
    }
}

package "Redux" {

    class "Store" << (R, gray) redux >> {
        +api
        +plot
        +models
        +referenceSettings
        ==methods==
        dispatch()
        useSelector(selector)
    }

    class "apiSlice" << (R, gray) redux >> {
        This redux wrapper performs api requests\nand handles caching
        ==methods==
        +getApiSpecification()
        +getModels()
        +getPlots()
        +getRawPlotData(plotType, lat_min, lat_max)
        +getBuildPlotData(plotType, lat_min, lat_max, ref_meas, ref_year)
    }

    class "modelsSlice" << (R, gray) redux >> {
        -initialState
        +actions
        +reducer
        ==methods==
        +selectCurrentModelGroups
        +selectCurrentModelGroup
    }

    class "plotSlice" << (R, gray) redux >> {
        -initialState
        +actions
        +reducer
        ==methods==
        +selectCurrentPlotType
        +selectCurrentPlotId
        +selectCurrentPlotSettings
    }

    class "referenceSettingsSlice" << (R, gray) redux >> {
        -initialState
        +actions
        +reducer
        ==methods==
        +selectCurrentReferenceSettings
    }

}

package "Services" {
    class "pdfCreator" <<(J, yellow) utils >> {
        this utility class allows to export\nthe current plot as a pdf file
        ==methods==
        + createPdfFromCurrentPlot
    }

    class "math" <<(J, yellow) utils >> {
        This class performs helpful operations\non the data series

        ==methods==
        +calculateSV(modelData)
    }
}

package "Utils" {

   
    class "OptionsFormatter" << (J, yellow) utils >> {
        This utility class merges given data from the store\ninto one data object apexcharts expects
        ==methods==
        +generatePlotOptions(plotSettings)
        +generatePlotSeries(modelData, statisticalValues)
    }

}

package "node modules" {

    class "pdfmake" << (N, green) library >> {
        Create pdf files on client-side
        ==methods==
        +createPdf()
    } 

    class "react" << (N, green) library >> {
        Handles the view of our app
    } 

    class "apexcharts" <<(N, green) library >> {
        Our plotting library
    }

    class "@reduxjs/toolkit/query/react" <<(N, green) library >> {
        An api wrapper for an api endpoint (o3as)
    }

    class "react-redux" <<(N, green) library >> {
        State management of our app
    }

}

"apexcharts" <.. "Graph"
"o3as" <..> "apiSlice"
"apiSlice" <.. "Store"
"modelsSlice" <.. "Store"
"plotSlice" <.. "Store"
"referenceSettingsSlice" <.. "Store"
"apiSlice" <.. "App"
"modelsSlice" <.. "App"
"plotSlice" <.. "App"
"referenceSettingsSlice" <.. "App"


"pdfCreator" ..> "pdfmake"
"Store" <..> "App"
"Graph" ..> "OptionsFormatter"
"Graph" ..> "math"
"apiSlice" <..> "@reduxjs/toolkit/query/react"
"Store" <..> "react-redux"
"App" <..> "react"

"App" o-- "Graph"
"App" ..> "pdfCreator" 

@enduml