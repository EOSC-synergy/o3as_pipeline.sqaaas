@startuml
actor User
participant "//<<Component>>//\nAddModelGroupModel" as AGS #3489eb
participant "//<<Component>>//\nGraph" as Graph #3489eb
database "//<<Redux>>//\nStore\n" as Store #808080
participant "//<<reducer>>//\naddModel" as reducer #808080
participant "API" as API #ebcc34
participant "//<<library>>//\napexcharts" as apexcharts #ffff00
participant "//<<library>>//\nOptionsFormatter" as formatter #ffff00



User->AGS: open()
activate AGS
AGS->AGS: addModelGroup()
AGS->Store: dispatch(SET_MODELS({groupId:"all", models:"[all]"}))
activate Store
deactivate AGS
Store->reducer: reduce(state, action)
activate reducer
reducer->Store: state
deactivate reducer

Graph<--Store: updateHook
deactivate Store

activate Graph 
Graph->Store: selectCurrentPlotType()
activate Store
Graph<-Store: plotType
deactivate Store
Graph->Store: selectCurrentPlotSettings()
activate Store
Graph<-Store: plotSettings
deactivate Store
Graph->Store: selectCurrentModelGroupById("all")
activate Store
Store->Store: check if selected models availiable
alt modelData is requiered
	Store->API: getModelData()
	API-->Store: modelData
else model data is available
	Store -> Store: modelData

end

Graph<-Store: modelData
deactivate Store
Graph->Store: selectCurrentReferenceSettings()
activate Store
Graph<-Store: referenceSettings
deactivate Store

Graph->formatter: generatePlotOptions(plotSettings)
activate formatter
Graph<-formatter: options
deactivate formatter
Graph->apexcharts: new Chart(plotType, dataSeries, options)
activate apexcharts
Graph<-apexcharts: rendered svg on DOM
deactivate apexcharts
User<--Graph: user sees updated Graph
deactivate Graph
@enduml