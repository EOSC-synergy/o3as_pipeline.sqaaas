@startuml
actor User
participant "//<<Component>>//\nAddModelGroupModel" as AGS #3489eb
participant "//<<Component>>//\nGraph" as Graph #3489eb
database "//<<Redux>>//\nStore\n" as Store #808080
participant "//<<action>>//\naddModel" as action #808080
participant "//<<reducer>>//\naddModel" as reducer #808080
participant "//<<library>>//\napexcharts" as apexcharts #00af57
participant "//<<utils>>//\nOptionsFormatter" as formatter #ffff00



User -> AGS: user clicks on add new Model Group

activate AGS
AGS -> action: addNewGroup({groupId:"all", models: selectedModels})

activate action
action -> AGS: action
deactivate action

AGS -> Store: dispatch(action)
deactivate AGS
activate Store
Store -> reducer: reduce(state, action)

activate reducer
reducer -> Store: state
deactivate reducer

Graph<--Store: updateHook
deactivate Store

activate Graph 
Graph->Store: selectCurrentPlotType()
activate Store
Graph<-Store: plotType
deactivate Store
Graph->Store: selectCurrentPlotSettings()
activate Store
Graph<-Store: plotSettings
deactivate Store
Graph->Store: selectCurrentModelGroupById("all")
activate Store
Graph<-Store: modelData
deactivate Store
Graph->Store: selectCurrentReferenceSettings()
activate Store
Graph<-Store: referenceSettings
deactivate Store
Graph->formatter: generatePlotSeries(modelData)
activate formatter
Graph<-formatter: dataSeries
deactivate formatter
Graph->formatter: generatePlotOptions(plotSettings)
activate formatter
Graph<-formatter: options
deactivate formatter
Graph->apexcharts: new Chart(plotType, dataSeries, options)
activate apexcharts
Graph<-apexcharts: rendered svg on DOM
deactivate apexcharts
User<--Graph: user sees updated Graph
deactivate Graph
@enduml