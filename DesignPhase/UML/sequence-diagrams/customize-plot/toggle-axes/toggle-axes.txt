@startuml
actor User
participant "//<<Component>>//\nGraph" as Graph #3489eb
participant "//<<Component>>//\nXAxisSlider\nor\nYAxisSlider" as Axis #3489eb
participant "//<<MaterialDesign>>//\nRangeSlider" as MDRangeSlider #ff8080
database "//<<Redux>>//\nStore\n" as Store #808080
participant "//<<action>>//\nsetDisplayRangeX\nor\nsetDisplayRangeY" as setDisplayRangeA #808080
participant "//<<reducer>>//\nsetDisplayRangeX\nor\nsetDisplayRangeY" as setDisplayRangeR #808080
participant "//<<library>>//\napexcharts" as apexcharts #00af57
participant "//<<utils>>//\nOptionsFormatter" as formatter #ffff00

User -> Axis : <<toggles slider>>
activate Axis
Axis -> MDRangeSlider : getValues()
activate MDRangeSlider
Axis <-- MDRangeSlider : minX, maxX or minY, maxY
deactivate MDRangeSlider
Axis -> setDisplayRangeA : setDisplayRangeX(minX, maxX) or setDisplayRangeY(minY, maxY)
activate setDisplayRangeA
Axis <-- setDisplayRangeA : action
deactivate setDisplayRangeA
Axis -> Store : dispatch(action)
deactivate Axis
activate Store
Store -> setDisplayRangeR : reduce(state, action)
activate setDisplayRangeR
Store <-- setDisplayRangeR : state
deactivate setDisplayRangeR
Graph <-- Store : updateHook
activate Graph
Graph->Store: selectCurrentPlotType()
Graph<--Store: plotType
Graph->Store: selectCurrentPlotSettings()
Graph<--Store: plotSettings
Graph->Store: selectCurrentReferenceSettings()
Graph<--Store: referenceSettings
deactivate Store
Graph->formatter: generatePlotOptions(plotSettings)
activate formatter
Graph<--formatter: options
deactivate formatter
Graph->apexcharts: new Chart(plotType, dataSeries, options)
activate apexcharts
Graph<--apexcharts: <<rendered svg on DOM>>
deactivate apexcharts
User <-- Graph : <<visual update>>
deactivate Graph
@enduml