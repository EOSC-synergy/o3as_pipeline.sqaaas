@startuml
skinparam dpi 300
skinparam style strictuml

actor User
participant "//<<Component>>//\nApp" as App #3489eb
participant "//<<Component>>//\nGraph" as Graph #3489eb
participant "//<<Component>>//\nSidebar" as sidebar #3489eb
participant "//<<Redux>>//\napiSlice" as apiSlice #808080
database "//<<Redux>>//\nStore\n" as Store #808080
participant "//<<Api>>//\no3as" as api #ebcc34
participant "//<<Library>>//\napexcharts" as apexcharts #00af57

User->App: <<opens webapp>>
activate App
App->>Graph: <<display loading spinner>>
Note over Graph: Display a loading\nanimation until\nall data is fetched
activate Graph

App->>apiSlice: useGetApiSpecificationQuery()
activate apiSlice
apiSlice->api: <<query specification>>
activate api
apiSlice<-api: specification
deactivate api
apiSlice->Store: <<cache specification>>
activate Store
apiSlice<--Store
deactivate Store
App<<-apiSlice: specification
deactivate apiSlice
App->>sidebar: <<build sections>>
activate sidebar
Note over sidebar: The sections are built\naccording to the\nopenapi specification
App<--sidebar: <<render sections>>
deactivate sidebar

App->>apiSlice: useGetPlotsQuery()
activate apiSlice
apiSlice->api: <<query availablePlots>>
activate api
apiSlice<-api: <<plot availablePlots>>
deactivate api
apiSlice->Store: <<cache availablePlots>>
activate Store
apiSlice<--Store
deactivate Store
App<<-apiSlice: availablePlots
deactivate apiSlice

App->>apiSlice: useGetModelsQuery()
activate apiSlice
apiSlice->api: <<query availableModels>>
activate api
apiSlice<-api: availableModels
deactivate api
apiSlice->Store: <<cache availableModels>>
activate Store
apiSlice<--Store
deactivate Store
App<<-apiSlice: availableModels
deactivate apiSlice

App->>apiSlice: useGetRawPlotDataMutation(availableModels, defaultRegion)
Note over apiSlice: All available models\nare fetched for\nthe default region
activate apiSlice
apiSlice->api: <<query plotData>>
activate api
apiSlice<-api: plotData
deactivate api
apiSlice->Store: <<cache plotData>>
activate Store
apiSlice<--Store
deactivate Store
App<<-apiSlice: plotData
deactivate apiSlice

Graph-->>App: <<loading completed>>
deactivate Graph
destroy Graph
App->>Graph: <<re-render Graph>>
activate Graph
Note over Graph: Now display the SVG\ncomponent rendered\nby apexcharts
Graph->Store: <<fetch relevant data>>
activate Store
Note over Store: Selecting all necessary\ndata is omitted here
Graph<-Store: "data"
deactivate Store
Note over Graph: Relevant data\ntransformation
Graph->apexcharts: <<create>>
activate apexcharts
Graph<-apexcharts: <<rendered SVG on DOM>>
deactivate apexcharts
App<--Graph: <<updates view>>
deactivate Graph
User<--App: <<sees updated Chart>>
deactivate App







@enduml